"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/extract-colors";
exports.ids = ["vendor-chunks/extract-colors"];
exports.modules = {

/***/ "(ssr)/./node_modules/extract-colors/lib/extract-colors.mjs":
/*!************************************************************!*\
  !*** ./node_modules/extract-colors/lib/extract-colors.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractColors: () => (/* binding */ extractColors),\n/* harmony export */   extractColorsFromImage: () => (/* binding */ extractColorsFromImage),\n/* harmony export */   extractColorsFromImageBitmap: () => (/* binding */ extractColorsFromImageBitmap),\n/* harmony export */   extractColorsFromImageData: () => (/* binding */ extractColorsFromImageData),\n/* harmony export */   extractColorsFromSrc: () => (/* binding */ extractColorsFromSrc)\n/* harmony export */ });\nconst EXTRACTOR_PIXELS_DEFAULT = 64e3;\nconst EXTRACTOR_DISTANCE_DEFAULT = 0.22;\nconst AVERAGE_HUE_DEFAULT = 1 / 12;\nconst AVERAGE_SATURATION_DEFAULT = 1 / 5;\nconst AVERAGE_LIGHTNESS_DEFAULT = 1 / 5;\nfunction testInputs({\n  pixels = EXTRACTOR_PIXELS_DEFAULT,\n  distance: distance2 = EXTRACTOR_DISTANCE_DEFAULT,\n  colorValidator = (_red, _green, _blue, _alpha) => (_alpha ?? 255) > 250,\n  hueDistance: hueDistance2 = AVERAGE_HUE_DEFAULT,\n  saturationDistance = AVERAGE_LIGHTNESS_DEFAULT,\n  lightnessDistance = AVERAGE_SATURATION_DEFAULT,\n  crossOrigin = \"\",\n  requestMode = \"cors\"\n} = {}) {\n  const testUint = (label, val, min = 0, max = Number.MAX_SAFE_INTEGER) => {\n    if (!Number.isInteger(val)) {\n      throw new Error(`${label} is not a valid number (${val})`);\n    }\n    if (val < min) {\n      console.warn(`${label} can not be less than ${min} (it's ${val})`);\n    }\n    if (val > max) {\n      console.warn(`${label} can not be more than ${max} (it's ${val})`);\n    }\n    return Math.min(Math.max(val, min), max);\n  };\n  const testNumber = (label, val, min = 0, max = Number.MAX_VALUE) => {\n    if (Number(val) !== val) {\n      throw new Error(`${label} is not a valid number (${val})`);\n    }\n    if (val < min) {\n      console.warn(`${label} can not be less than ${min} (it's ${val})`);\n    }\n    if (val > max) {\n      console.warn(`${label} can not be more than ${max} (it's ${val})`);\n    }\n    return Math.min(Math.max(val, min), max);\n  };\n  const testFunction = (label, val) => {\n    if (!val || {}.toString.call(val) !== \"[object Function]\") {\n      throw new Error(`${label} is not a function (${val})`);\n    }\n    return val;\n  };\n  const testValueInList = (label, val, list) => {\n    if (list.indexOf(val) < 0) {\n      console.warn(\n        `${label} can be one of this values ${list.map((v) => `\"${v}\"`).join(\", \")} (it's \"${val}\")`\n      );\n    }\n  };\n  testUint(\"pixels\", pixels || 0, 1);\n  testNumber(\"distance\", distance2, 0, 1);\n  testFunction(\"colorValidator\", colorValidator);\n  testNumber(\"hueDistance\", hueDistance2, 0, 1);\n  testNumber(\"saturationDistance\", saturationDistance, 0, 1);\n  testNumber(\"lightnessDistance\", lightnessDistance, 0, 1);\n  testValueInList(\"crossOrigin\", crossOrigin, [\n    \"\",\n    \"anonymous\",\n    \"use-credentials\"\n  ]);\n  testValueInList(\"requestMode\", requestMode, [\n    \"cors\",\n    \"navigate\",\n    \"no-cors\",\n    \"same-origin\"\n  ]);\n}\nconst cleanInputs = ({\n  pixels = EXTRACTOR_PIXELS_DEFAULT,\n  distance: distance2 = EXTRACTOR_DISTANCE_DEFAULT,\n  colorValidator = (_red, _green, _blue, _alpha) => (_alpha ?? 255) > 250,\n  hueDistance: hueDistance2 = AVERAGE_HUE_DEFAULT,\n  saturationDistance = AVERAGE_LIGHTNESS_DEFAULT,\n  lightnessDistance = AVERAGE_SATURATION_DEFAULT,\n  crossOrigin = \"\",\n  requestMode = \"cors\"\n} = {}) => {\n  return [\n    Math.max(pixels, 1),\n    Math.min(Math.max(distance2, 0), 1),\n    colorValidator,\n    Math.min(Math.max(hueDistance2, 0), 1),\n    Math.min(Math.max(saturationDistance, 0), 1),\n    Math.min(Math.max(lightnessDistance, 0), 1),\n    crossOrigin,\n    requestMode\n  ];\n};\nclass Color {\n  /**\n   * Set red, green and blue colors to create the Color object.\n   */\n  constructor(red, green, blue, hex = red << 16 | green << 8 | blue) {\n    this._count = 1;\n    this.__saturation = -1;\n    this.__hue = -1;\n    this.__lightness = -1;\n    this.__intensity = -1;\n    this._red = red;\n    this._green = green;\n    this._blue = blue;\n    this._hex = hex;\n  }\n  /**\n   * Distance between two colors.\n   * - Minimum is 0 (between two same colors)\n   * - Maximum is 1 (for example between black and white)\n   */\n  static distance(colorA, colorB) {\n    return (Math.abs(colorB._red - colorA._red) + Math.abs(colorB._green - colorA._green) + Math.abs(colorB._blue - colorA._blue)) / (3 * 255);\n  }\n  clone() {\n    const color = new Color(this._red, this._green, this._blue, this._hex);\n    color._count = this._count;\n    return color;\n  }\n  updateHSL() {\n    const red = this._red / 255;\n    const green = this._green / 255;\n    const blue = this._blue / 255;\n    const max = Math.max(red, green, blue);\n    const min = Math.min(red, green, blue);\n    this.__lightness = (max + min) / 2;\n    if (max === min) {\n      this.__hue = 0;\n      this.__saturation = 0;\n      this.__intensity = 0;\n    } else {\n      const distance2 = max - min;\n      this.__saturation = this.__lightness > 0.5 ? distance2 / (2 - max - min) : distance2 / (max + min);\n      this.__intensity = this.__saturation * ((0.5 - Math.abs(0.5 - this.__lightness)) * 2);\n      switch (max) {\n        case red:\n          this.__hue = ((green - blue) / distance2 + (green < blue ? 6 : 0)) / 6;\n          break;\n        case green:\n          this.__hue = ((blue - red) / distance2 + 2) / 6;\n          break;\n        case blue:\n          this.__hue = ((red - green) / distance2 + 4) / 6;\n          break;\n      }\n    }\n  }\n  /**\n   * Hue from 0 to 1\n   */\n  get _hue() {\n    if (this.__hue === -1) {\n      this.updateHSL();\n    }\n    return this.__hue;\n  }\n  /**\n   * Saturation from 0 to 1\n   */\n  get _saturation() {\n    if (this.__saturation === -1) {\n      this.updateHSL();\n    }\n    return this.__saturation;\n  }\n  /**\n   * Lightness from 0 to 1\n   */\n  get _lightness() {\n    if (this.__lightness === -1) {\n      this.updateHSL();\n    }\n    return this.__lightness;\n  }\n  /**\n   * Color intensity from 0 to 1\n   */\n  get _intensity() {\n    if (this.__intensity === -1) {\n      this.updateHSL();\n    }\n    return this.__intensity;\n  }\n}\nclass LeafGroup {\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor() {\n    this._count = 0;\n    this._children = {};\n  }\n  /**\n   * Add color to the group.\n   *\n   * @param _hex Hexadecimal value of the color\n   * @param _red Red chanel amount of the color\n   * @param _green Green chanel amount of the color\n   * @param _blue Blue chanel amount of the color\n   * @returns The color\n   */\n  addColor(_hex, _red, _green, _blue) {\n    this._count++;\n    if (this._children[_hex]) {\n      this._children[_hex]._count++;\n    } else {\n      this._children[_hex] = new Color(_red, _green, _blue, _hex);\n    }\n    return this._children[_hex];\n  }\n  /**\n   * Get list of groups of list of colors.\n   *\n   * @returns List of colors\n   */\n  getList() {\n    return Object.keys(this._children).map(\n      (key) => this._children[key]\n    );\n  }\n  /**\n   * Representative color of leaf.\n   *\n   * @returns Main color of the leaf\n   */\n  createMainColor() {\n    const list = this.getList();\n    const biggest = list.reduce((a, b) => a._count >= b._count ? a : b);\n    const main = biggest.clone();\n    main._count = this._count;\n    return main;\n  }\n}\nclass RootGroup {\n  /**\n   * Store colors or groups and _count similiar groups in the image.\n   */\n  constructor() {\n    this._count = 0;\n    this._children = {};\n  }\n  /**\n   * Get list of groups of list of colors.\n   */\n  getList() {\n    return Object.keys(this._children).map(\n      (key) => this._children[key]\n    );\n  }\n  addColor(r, g, b) {\n    const full = r << 16 | g << 8 | b;\n    const loss = (r >> 4 & 15) << 8 | (g >> 4 & 15) << 4 | b >> 4 & 15;\n    this._count++;\n    return this.getLeafGroup(loss).addColor(full, r, g, b);\n  }\n  /**\n   * Add a key for a color, this key is a simplification to find neighboring colors.\n   * Neighboring colors has same key.\n   */\n  getLeafGroup(key) {\n    if (!this._children[key]) {\n      this._children[key] = new LeafGroup();\n    }\n    return this._children[key];\n  }\n  /**\n   * List of colors sorted by importance (neighboring hare calculated by distance and removed).\n   * Importance is calculated with the saturation and _count of neighboring colors.\n   */\n  getColors(_distance) {\n    const list = this.getList().map((child) => child.createMainColor());\n    list.sort((a, b) => b._count - a._count);\n    const newList = [];\n    while (list.length) {\n      const current = list.shift();\n      list.filter((color) => Color.distance(current, color) < _distance).forEach((near) => {\n        current._count += near._count;\n        const i = list.findIndex((color) => color === near);\n        list.splice(i, 1);\n      });\n      newList.push(current);\n    }\n    return newList;\n  }\n}\nconst extractor = ({\n  data,\n  width,\n  height\n}, _pixels, _distance, _colorValidator) => {\n  const colorGroup = new RootGroup();\n  const reducer = width && height ? Math.floor(width * height / _pixels) || 1 : 1;\n  let ignoredColorsCount = 0;\n  for (let i = 0; i < data.length; i += 4 * reducer) {\n    const r = data[i];\n    const g = data[i + 1];\n    const b = data[i + 2];\n    const a = data[i + 3];\n    if (_colorValidator(r, g, b, a)) {\n      colorGroup.addColor(r, g, b);\n    } else {\n      ignoredColorsCount++;\n    }\n  }\n  return {\n    colors: colorGroup.getColors(_distance),\n    count: colorGroup._count + ignoredColorsCount\n  };\n};\nconst distance = (a, b) => Math.abs(a - b);\nconst hueDistance = (a, b) => Math.min(distance(a, b), distance((a + 0.5) % 1, (b + 0.5) % 1));\nclass AverageGroup {\n  constructor() {\n    this.colors = [];\n    this._average = null;\n  }\n  addColor(color) {\n    this.colors.push(color);\n    this._average = null;\n  }\n  isSamePalette(color, hue, saturation, lightness) {\n    for (const currentColor of this.colors) {\n      const isSame = hueDistance(currentColor._hue, color._hue) < hue && distance(currentColor._saturation, color._saturation) < saturation && distance(currentColor._lightness, color._lightness) < lightness;\n      if (!isSame) {\n        return false;\n      }\n    }\n    return true;\n  }\n  get average() {\n    if (!this._average) {\n      const { r, g, b } = this.colors.reduce(\n        (total2, color) => {\n          total2.r += color._red;\n          total2.g += color._green;\n          total2.b += color._blue;\n          return total2;\n        },\n        { r: 0, g: 0, b: 0 }\n      );\n      const total = this.colors.reduce(\n        (_count, color) => _count + color._count,\n        0\n      );\n      this._average = new Color(\n        Math.round(r / this.colors.length),\n        Math.round(g / this.colors.length),\n        Math.round(b / this.colors.length)\n      );\n      this._average._count = total;\n    }\n    return this._average;\n  }\n}\nclass AverageManager {\n  constructor(hue, saturation, lightness) {\n    this._groups = [];\n    this._hue = hue;\n    this._saturation = saturation;\n    this._lightness = lightness;\n  }\n  addColor(color) {\n    const samePalette = this._groups.find(\n      (averageGroup) => averageGroup.isSamePalette(\n        color,\n        this._hue,\n        this._saturation,\n        this._lightness\n      )\n    );\n    if (samePalette) {\n      samePalette.addColor(color);\n    } else {\n      const averageGroup = new AverageGroup();\n      averageGroup.addColor(color);\n      this._groups.push(averageGroup);\n    }\n  }\n  getGroups() {\n    return this._groups.map((averageGroup) => averageGroup.average);\n  }\n}\nconst sortColors = (list, _pixels, _hueDistance, _saturationDistance, _lightnessDistance) => {\n  const averageManager = new AverageManager(\n    _hueDistance,\n    _saturationDistance,\n    _lightnessDistance\n  );\n  list.forEach((color) => averageManager.addColor(color));\n  const sorted = averageManager.getGroups();\n  sorted.sort((a, b) => {\n    const bPower = (b._intensity + 0.1) * (0.9 - b._count / _pixels);\n    const aPower = (a._intensity + 0.1) * (0.9 - a._count / _pixels);\n    return bPower - aPower;\n  });\n  return sorted;\n};\nconst createFinalColor = (color, pixels) => {\n  return {\n    hex: `#${\"0\".repeat(\n      6 - color._hex.toString(16).length\n    )}${color._hex.toString(16)}`,\n    red: color._red,\n    green: color._green,\n    blue: color._blue,\n    area: color._count / pixels,\n    hue: color._hue,\n    saturation: color._saturation,\n    lightness: color._lightness,\n    intensity: color._intensity\n  };\n};\nconst checkIsBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nconst checkIsWorker = () => typeof self === \"object\" && self.constructor && self.constructor.name === \"DedicatedWorkerGlobalScope\";\nconst checkIsNode = () => typeof window === \"undefined\" && // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\ntypeof process !== \"undefined\" && // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nprocess.versions != null && // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nprocess.versions.node != null;\nconst sortFinalColors = (_colors, _pixels, _hueDistance, _saturationDistance, _lightnessDistance) => {\n  const list = sortColors(\n    _colors,\n    _pixels,\n    _hueDistance,\n    _saturationDistance,\n    _lightnessDistance\n  );\n  return list.map((color) => createFinalColor(color, _pixels));\n};\nconst extractImageData = (_image, _pixels) => {\n  const currentPixels = _image.width * _image.height;\n  const width = currentPixels < _pixels ? _image.width : Math.round(_image.width * Math.sqrt(_pixels / currentPixels));\n  const height = currentPixels < _pixels ? _image.height : Math.round(_image.height * Math.sqrt(_pixels / currentPixels));\n  const canvas = ((width2, height2) => {\n    if (checkIsWorker()) {\n      return new OffscreenCanvas(width2, height2);\n    }\n    const canvas2 = document.createElement(\"canvas\");\n    canvas2.width = width2;\n    canvas2.height = height2;\n    return canvas2;\n  })(width, height);\n  const context = canvas.getContext(\"2d\");\n  context.drawImage(\n    _image,\n    0,\n    0,\n    _image.width,\n    _image.height,\n    0,\n    0,\n    width,\n    height\n  );\n  return context.getImageData(0, 0, width, height);\n};\nconst extractColorsFromImageData = (imageData, options = {}) => {\n  if (true) {\n    testInputs(options);\n  }\n  const [\n    _pixels,\n    _distance,\n    _colorValidator,\n    _hueDistance,\n    _saturationDistance,\n    _lightnessDistance\n  ] = cleanInputs(options);\n  const { colors, count } = extractor(\n    imageData,\n    _pixels,\n    _distance,\n    _colorValidator\n  );\n  return sortFinalColors(\n    colors,\n    count,\n    _hueDistance,\n    _saturationDistance,\n    _lightnessDistance\n  );\n};\nconst extractColorsFromImage = async (image, options = {}) => {\n  if (checkIsNode()) {\n    if (true) {\n      throw new Error(\n        \"Use extractColors instead extractColorsFromImage for Node.js\"\n      );\n    }\n    return [];\n  }\n  if (true) {\n    testInputs(options);\n  }\n  const [\n    _pixels,\n    _distance,\n    _colorValidator,\n    _hueDistance,\n    _saturationDistance,\n    _lightnessDistance,\n    _crossOrigin\n  ] = cleanInputs(options);\n  image.crossOrigin = _crossOrigin;\n  return new Promise((resolve) => {\n    const extract = (image2) => {\n      const imageData = extractImageData(image2, _pixels);\n      const { colors, count } = extractor(\n        imageData,\n        _pixels,\n        _distance,\n        _colorValidator\n      );\n      resolve(\n        sortFinalColors(\n          colors,\n          count,\n          _hueDistance,\n          _saturationDistance,\n          _lightnessDistance\n        )\n      );\n    };\n    if (image.complete) {\n      extract(image);\n    } else {\n      const imageLoaded = () => {\n        image.removeEventListener(\"load\", imageLoaded);\n        extract(image);\n      };\n      image.addEventListener(\"load\", imageLoaded);\n    }\n  });\n};\nconst extractColorsFromImageBitmap = async (image, options = {}) => {\n  if (checkIsNode()) {\n    if (true) {\n      throw new Error(\n        \"Use extractColors instead extractColorsFromImageBitmap for Node.js\"\n      );\n    }\n    return [];\n  }\n  if (true) {\n    testInputs(options);\n  }\n  const [\n    _pixels,\n    _distance,\n    _colorValidator,\n    _hueDistance,\n    _saturationDistance,\n    _lightnessDistance\n  ] = cleanInputs(options);\n  const imageData = extractImageData(image, _pixels);\n  const { colors, count } = extractor(\n    imageData,\n    _pixels,\n    _distance,\n    _colorValidator\n  );\n  return sortFinalColors(\n    colors,\n    count,\n    _hueDistance,\n    _saturationDistance,\n    _lightnessDistance\n  );\n};\nconst extractColorsFromSrc = async (src, options = {}) => {\n  if (checkIsNode()) {\n    if (true) {\n      throw new Error(\"Can not use extractColorsFromSrc for Node.js\");\n    }\n    return [];\n  }\n  if (true) {\n    testInputs(options);\n  }\n  if (checkIsWorker()) {\n    const inputs = cleanInputs(options);\n    const response = await fetch(src, { mode: inputs[7] });\n    const blob = await response.blob();\n    const bitmap = await createImageBitmap(blob);\n    const colors = await extractColorsFromImageBitmap(bitmap, options);\n    bitmap.close();\n    return colors;\n  }\n  const image = new Image();\n  image.src = src;\n  return extractColorsFromImage(image, options);\n};\nconst extractColors = (picture, options) => {\n  if (checkIsBrowser()) {\n    if (true) {\n      if (options == null ? void 0 : options.requestMode) {\n        console.warn(\n          \"options.requestMode not supported in Browser, use options.crossOrigin instead\"\n        );\n      }\n    }\n    if (picture instanceof Image) {\n      return extractColorsFromImage(picture, options);\n    }\n    if (picture instanceof ImageData || picture instanceof Object && picture.data) {\n      return new Promise((resolve) => {\n        resolve(extractColorsFromImageData(picture, options));\n      });\n    }\n    if (typeof picture === \"string\") {\n      return extractColorsFromSrc(picture, options);\n    }\n  }\n  if (checkIsWorker()) {\n    if (true) {\n      if (options == null ? void 0 : options.crossOrigin) {\n        console.warn(\n          \"options.crossOrigin not supported in Web Worker, use options.requestMode instead\"\n        );\n      }\n    }\n    if (picture instanceof ImageData || picture instanceof Object && picture.data) {\n      return new Promise((resolve) => {\n        resolve(\n          extractColorsFromImageData(\n            picture,\n            options\n          )\n        );\n      });\n    }\n    if (typeof picture === \"string\") {\n      return extractColorsFromSrc(picture, options);\n    }\n    if (picture.src) {\n      if (true) {\n        console.warn(\n          \"HTMLImageElement not enable on worker, a fallback is used to extract src from your HTMLImageElement, please send 'src' instead HTMLImageElement\"\n        );\n      }\n      return extractColorsFromSrc(picture.src, options);\n    }\n  }\n  if (checkIsNode()) {\n    if (true) {\n      if (picture instanceof String) {\n        throw new Error(\n          \"Send imageData to extractColors (Image src or HTMLImageElement not supported in Nodejs)\"\n        );\n      }\n      if (!picture.data) {\n        throw new Error(\"Send imageData to extractColors\");\n      }\n      if (options == null ? void 0 : options.crossOrigin) {\n        console.warn(\"options.crossOrigin not supported in Node.js\");\n      }\n    }\n    return new Promise((resolve) => {\n      resolve(\n        extractColorsFromImageData(picture, options)\n      );\n    });\n  }\n  throw new Error(`Can not analyse picture`);\n};\n\n//# sourceMappingURL=extract-colors.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/extract-colors/lib/extract-colors.mjs\n");

/***/ })

};
;